// <auto-generated />
using System;
using DeliveryOrders.Infrastructure.Adapters.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DeliveryOrders.Infrastructure.Adapters.Postgres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeliveryOrders.Core.Domain.Model.PickupPointAggregate.PickupPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("pickup_points", (string)null);
                });

            modelBuilder.Entity("DeliveryOrders.Core.Domain.Model.ShipmentAggregate.Cargo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    b.Property<string>("CargoType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cargo_type");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("package_type");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("shipment_id");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("cargo", (string)null);
                });

            modelBuilder.Entity("DeliveryOrders.Core.Domain.Model.ShipmentAggregate.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("DeparturePointId")
                        .HasColumnType("uuid")
                        .HasColumnName("departure_point_id");

                    b.Property<Guid>("DestinationPointId")
                        .HasColumnType("uuid")
                        .HasColumnName("destination_point_id");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shipment_date");

                    b.HasKey("Id");

                    b.ToTable("shipments", (string)null);
                });

            modelBuilder.Entity("DeliveryOrders.Core.Domain.Model.PickupPointAggregate.PickupPoint", b =>
                {
                    b.OwnsOne("DeliveryOrders.Core.Domain.SharedKernel.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PickupPointId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("House")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("house");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("region");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");

                            b1.HasKey("PickupPointId");

                            b1.ToTable("pickup_points");

                            b1.WithOwner()
                                .HasForeignKey("PickupPointId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("DeliveryOrders.Core.Domain.Model.ShipmentAggregate.Cargo", b =>
                {
                    b.HasOne("DeliveryOrders.Core.Domain.Model.ShipmentAggregate.Shipment", null)
                        .WithMany("cargos")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DeliveryOrders.Core.Domain.Model.ShipmentAggregate.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<long>("CargoId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Height")
                                .HasColumnType("numeric")
                                .HasColumnName("height");

                            b1.Property<decimal>("Length")
                                .HasColumnType("numeric")
                                .HasColumnName("length");

                            b1.Property<decimal>("Volume")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Weight")
                                .HasColumnType("numeric")
                                .HasColumnName("weight");

                            b1.Property<decimal>("Width")
                                .HasColumnType("numeric")
                                .HasColumnName("width");

                            b1.HasKey("CargoId");

                            b1.ToTable("cargo");

                            b1.WithOwner()
                                .HasForeignKey("CargoId");
                        });

                    b.Navigation("Dimensions")
                        .IsRequired();
                });

            modelBuilder.Entity("DeliveryOrders.Core.Domain.Model.ShipmentAggregate.Shipment", b =>
                {
                    b.Navigation("cargos");
                });
#pragma warning restore 612, 618
        }
    }
}
